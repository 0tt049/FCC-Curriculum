#+title: * Object Oriented JavaScript
OOP, or Object Oriented Programming, is one of the major approaches to the software development process. In OOP, objects and classes organize code to describe things and what they can do. In this course, you'll learn the basic principles of OOP in JavaScript, including the this keyword, prototype chains, constructors, and inheritance.

** Create a Basic JavaScript Object
*** INFO:

Think about things people see every day, like cars, shops, and birds. These are all objects: tangible things people can observe and interact with.

What are some qualities of these objects? A car has wheels. Shops sell items. Birds have wings.

These qualities, or properties, define what makes up an object. Note that similar objects share the same properties, but may have different values for those properties. For example, all cars have wheels, but not all cars have the same number of wheels.

Objects in JavaScript are used to model real-world objects, giving them properties and behavior just like their real-world counterparts. Here's an example using these concepts to create a duck object:

#+begin_src javascript

let duck = {
    name: "Aflac",
    numLegs: 2
};

#+end_src

This duck object has two property/value pairs: a name of Aflac and a numLegs of 2.

*** CODE:
Create a dog object with name and numLegs properties, and set them to a string and a number, respectively.

#+begin_src javascript

let dog = {
  name: "Auau",
  numLegs: 4
};

#+end_src

** Use Dot Notation to Access the Properties of an Object
*** INFO:

The last challenge created an object with various properties. Now you'll see how to access the values of those properties. Here's an example:

#+begin_src javascript

let duck = {
    name: "Aflac",
    numLegs: 2
};
console.log(duck.name);

#+end_src

Dot notation is used on the object name, duck, followed by the name of the property, name, to access the value of Aflac.

*** CODE:

Print both properties of the dog object to your console.

#+begin_src javascript

let dog = {
  name: "Spot",
  numLegs: 4
};
// Only change code below this line
console.log(dog.name);
console.log(dog.numLegs);

#+end_src

** Create a Method on an Object
*** INFO:

Objects can have a special type of property, called a method.

Methods are properties that are functions. This adds different behavior to an object. Here is the duck example with a method:

#+begin_src javascript

let duck = {
  name: "Aflac",
  numLegs: 2,
  sayName: function() {return "The name of this duck is " + duck.name + ".";}
};
duck.sayName();

#+end_src

The example adds the sayName method, which is a function that returns a sentence giving the name of the duck. Notice that the method accessed the name property in the return statement using duck.name. The next challenge will cover another way to do this.

*** CODE:

Using the dog object, give it a method called sayLegs. The method should return the sentence This dog has 4 legs.

#+begin_src javascript

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function () { return `This dog has ${dog.numLegs} legs.` }

};

dog.sayLegs();

#+end_src

** Make Code More Reusable with the this Keyword
*** INFO:

The last challenge introduced a method to the duck object. It used duck.name dot notation to access the value for the name property within the return statement:

#+begin_src javascript

sayName: function() {return "The name of this duck is " + duck.name + ".";}

#+end_src

While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.

A way to avoid these issues is with the this keyword:

#+begin_src javascript

let duck = {
  name: "Aflac",
  numLegs: 2,
  sayName: function() {return "The name of this duck is " + this.name + ".";}
};

#+end_src

this is a deep topic, and the above example is only one way to use it. In the current context, this refers to the object that the method is associated with: duck. If the object's name is changed to mallard, it is not necessary to find all the references to duck in the code. It makes the code reusable and easier to read.

*** CODE:

Modify the dog.sayLegs method to remove any references to dog. Use the duck example for guidance.

#+begin_src javascript

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function () { return `This dog has ${this.numLegs} legs.`; }
};

dog.sayLegs();

#+end_src

** Define a Constructor Function
*** INFO:

Constructors are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.

Here is an example of a constructor:

#+begin_src javascript

function Bird() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
}

#+end_src

This constructor defines a Bird object with properties name, color, and numLegs set to Albert, blue, and 2, respectively. Constructors follow a few conventions:

- Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.
- Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.
- Constructors define properties and behaviors instead of returning a value as other functions might.

*** CODE:

Create a constructor, Dog, with properties name, color, and numLegs that are set to a string, a string, and a number, respectively.


#+begin_src javascript

function Dog() {
  this.name = "Spot";
  this.color = "black";
  this.numLegs = 4
}

#+end_src

** Use a Constructor to Create Objects
*** INFO

Here's the Bird constructor from the previous challenge:

#+begin_SRC javascript options

function Bird() {
  this.name = "Albert";
  this.color  = "blue";
  this.numLegs = 2;
}

let blueBird = new Bird();

#+end_SRC


NOTE: this inside the constructor always refers to the object being created.

Notice that the new operator is being used when calling a constructor. This tells JavaScript to create a new instance of Bird called blueBird. Without the new operator, this inside the constructor would not point to the newly created object, giving unexpected results. Now blueBird has all the properties defined inside the Bird constructor:


#+begin_SRC javascript

blueBird.name;
blueBird.color;
blueBird.numLegs;

#+end_SRC

Just like any other object, its properties can be accessed and modified:

#+begin_SRC javascript

blueBird.name = 'Elvira';
blueBird.name;

#+end_SRC

*** CODE:

Use the Dog constructor from the last lesson to create a new instance of Dog, assigning it to a variable hound.

#+begin_src javascript

function Dog() {
  this.name = "Rupert";
  this.color = "brown";
  this.numLegs = 4;
}
// Only change code below this line

let hound = new Dog();

#+end_src

** Extend Constructors to Receive Arguments
*** INFO:

The Bird and Dog constructors from the last challenge worked well. However, notice that all Birds that are created with the Bird constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:

#+begin_src javascript

let swan = new Bird();
swan.name = "Carlos";
swan.color = "white";

#+end_src

Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one. To more easily create different Bird objects, you can design your Bird constructor to accept parameters:

#+begin_src javascript

function Bird(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

#+end_src

Then pass in the values as arguments to define each unique bird into the Bird constructor: let cardinal = new Bird("Bruce", "red"); This gives a new instance of Bird with name and color properties set to Bruce and red, respectively. The numLegs property is still set to 2. The cardinal has these properties:

#+begin_src javascript

cardinal.name
cardinal.color
cardinal.numLegs

#+end_src

The constructor is more flexible. It's now possible to define the properties for each Bird at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.

*** CODE:

Create another Dog constructor. This time, set it up to take the parameters name and color, and have the property numLegs fixed at 4. Then create a new Dog saved in a variable terrier. Pass it two strings as arguments for the name and color properties.

#+begin_src javascript

function Dog(name, color) {
    this.name = name;
    this.color = color;
    this.numLegs = 4;
}

let terrier = new Dog("Max", "grey");

#+end_src

** Verify an Object's Constructor with instanceof
*** INFO:

Anytime a constructor function creates a new object, that object is said to be an instance of its constructor. JavaScript gives a convenient way to verify this with the ~instanceof~ operator. ~instanceof~ allows you to compare an object to a constructor, returning ~true~ or ~false~ based on whether or not that object was created with the constructor. Here's an example:

 #+begin_src javascript

let Bird = function(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

let crow = new Bird("Alexis", "black");

crow instanceof Bird;

#+end_src


This ~instanceof~ method would return true.

If an object is created without using a constructor, ~instanceof~ will verify that it is not an instance of that constructor:

#+begin_src javascript

let canary = {
  name: "Mildred",
  color: "Yellow",
 numLegs: 2
};

canary instanceof Bird;

#+end_src

This ~instanceof~ method would return false.

*** CODE:

Create a new instance of the House constructor, calling it ~myHouse~ and passing a number of bedrooms. Then, use ~instanceof~ to verify that it is an instance of House.

#+begin_src javascript

function House(numBedrooms) {
  this.numBedrooms = numBedrooms;
}

// Only change code below this line

let myHouse = new House(3);

myHouse instanceof House;

#+end_src

** Understand Own Properties
*** INFO:

In the following example, the ~Bird~ constructor defines two properties: ~name~ and ~numLegs~:

#+begin_src javascript

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let duck = new Bird("Donald");
let canary = new Bird("Tweety");

#+end_src

~name~ and ~numLegs~ are called own properties, because they are defined directly on the instance object. That means that ~duck~ and ~canary~ each has its own separate copy of these properties. In fact every instance of ~Bird~ will have its own copy of these properties. The following code adds all of the own properties of ~duck~ to the array ~ownProps~:

#+begin_src javascript

let ownProps = [];

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

console.log(ownProps);

#+end_src

The console would display the value ~["name", "numLegs"]~.

*** CODE:

Add the own properties of canary to the array ownProps.

#+begin_src javascript

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let canary = new Bird("Tweety");
let ownProps = [];
// Only change code below this line

for (let property in canary) {
  if(canary.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

#+end_src

** Use Prototype Properties to Reduce Duplicate Code
*** INFO:

Since numLegs will probably have the same value for all instances of Bird, you essentially have a duplicated variable numLegs inside each Bird instance.

This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.

A better way is to use the prototype of Bird. Properties in the prototype are shared among ALL instances of Bird. Here's how to add numLegs to the Bird prototype:

#+begin_src javascript

Bird.prototype.numLegs = 2;

#+end_src

Now all instances of Bird have the numLegs property.

#+begin_src javascript

console.log(duck.numLegs);
console.log(canary.numLegs);

#+end_src

Since all instances automatically have the properties on the prototype, think of a prototype as a "recipe" for creating objects. Note that the prototype for duck and canary is part of the Bird constructor as Bird.prototype. Nearly every object in JavaScript has a prototype property which is part of the constructor function that created it.

*** CODE:

Add a numLegs property to the prototype of Dog

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

// Only change code above this line
let beagle = new Dog("Snoopy");

#+end_src

** Iterate Over All Properties
*** INFO:

You have now seen two kinds of properties: <dfn>own properties</dfn> and ~prototype~ properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the ~prototype~.

#+begin_src javascript

function Bird(name) {
  this.name = name;  //own property
}

Bird.prototype.numLegs = 2; // prototype property

let duck = new Bird("Donald");

#+end_src

Here is how you add ~duck~'s own properties to the array ~ownProps~ and ~prototype~ properties to the array ~prototypeProps~:

#+begin_src javascript

let ownProps = [];
let prototypeProps = [];

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  } else {
    prototypeProps.push(property);
  }
}

console.log(ownProps);
console.log(prototypeProps);

#+end_src

~console.log(ownProps)~ would display ~["name"]~ in the console, and ~console.log(prototypeProps)~ would display ~["numLegs"]~.

*** CODE:

Add all of the own properties of ~beagle~ to the array ~ownProps~. Add all of the ~prototype~ properties of ~Dog~ to the array ~prototypeProps~.

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

let beagle = new Dog("Snoopy");

let ownProps = [];
let prototypeProps = [];

// Only change code below this line

for (let property in beagle) {
  if(beagle.hasOwnProperty(property)) {
    ownProps.push(property);
  } else {
    prototypeProps.push(property);
  }
}

#+end_src

** Understand the Constructor Property
*** INFO:

There is a special ~constructor~ property located on the object instances ~duck~ and ~beagle~ that were created in the previous challenges:

#+begin_src

let duck = new Bird();
let beagle = new Dog();

console.log(duck.constructor === Bird);
console.log(beagle.constructor === Dog);

#+end_src

Both of these ~console.log~ calls would display ~true~ in the console.

Note that the ~constructor~ property is a reference to the constructor function that created the instance. The advantage of the ~constructor~ property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:

#+begin_src

function joinBirdFraternity(candidate) {
  if (candidate.constructor === Bird) {
    return true;
  } else {
    return false;
  }
}

#+end_src

**Note:** Since the ~constructor~ property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the ~instanceof~ method to check the type of an object.

*** CODE:

Write a ~joinDogFraternity~ function that takes a ~candidate~ parameter and, using the ~constructor~ property, return ~true~ if the candidate is a ~Dog~, otherwise return ~false~.

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

// Only change code below this line
function joinDogFraternity(candidate) {
    if (candidate.constructor === Dog){
    return true;
    } else {
    return false;
    }
}

#+end_src
** [Change the Prototype to a New Object]
** [Remember to Set the Constructor Property when Changing the Prototype]
** [Understand Where an Object’s Prototype Comes From]
** [Understand the Prototype Chain]
** [Use Inheritance So You Don't Repeat Yourself]
** [Inherit Behaviors from a Supertype]
** [Set the Child's Prototype to an Instance of the Parent]
** [Reset an Inherited Constructor Property]
** [Add Methods After Inheritance]
** [Override Inherited Meth
** [Use a Mixin to Add Common Behavior Between Unrelated Objects]
** [Use Closure to Protect Properties Within an Object from Being Modified Externally]
** [Understand the Immediately Invoked Function Expression (IIFE)]
** [Use an IIFE to Create a Module]

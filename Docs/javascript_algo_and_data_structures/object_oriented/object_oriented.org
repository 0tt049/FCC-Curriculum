#+title: * Object Oriented JavaScript
OOP, or Object Oriented Programming, is one of the major approaches to the software development process. In OOP, objects and classes organize code to describe things and what they can do. In this course, you'll learn the basic principles of OOP in JavaScript, including the this keyword, prototype chains, constructors, and inheritance.

** Create a Basic JavaScript Object
*** INFO:

Think about things people see every day, like cars, shops, and birds. These are all objects: tangible things people can observe and interact with.

What are some qualities of these objects? A car has wheels. Shops sell items. Birds have wings.

These qualities, or properties, define what makes up an object. Note that similar objects share the same properties, but may have different values for those properties. For example, all cars have wheels, but not all cars have the same number of wheels.

Objects in JavaScript are used to model real-world objects, giving them properties and behavior just like their real-world counterparts. Here's an example using these concepts to create a duck object:

#+begin_src javascript

let duck = {
    name: "Aflac",
    numLegs: 2
};

#+end_src

This duck object has two property/value pairs: a name of Aflac and a numLegs of 2.

*** CODE:
Create a dog object with name and numLegs properties, and set them to a string and a number, respectively.

#+begin_src javascript

let dog = {
  name: "Auau",
  numLegs: 4
};

#+end_src

** Use Dot Notation to Access the Properties of an Object
*** INFO:

The last challenge created an object with various properties. Now you'll see how to access the values of those properties. Here's an example:

#+begin_src javascript

let duck = {
    name: "Aflac",
    numLegs: 2
};
console.log(duck.name);

#+end_src

Dot notation is used on the object name, duck, followed by the name of the property, name, to access the value of Aflac.

*** CODE:

Print both properties of the dog object to your console.

#+begin_src javascript

let dog = {
  name: "Spot",
  numLegs: 4
};
// Only change code below this line
console.log(dog.name);
console.log(dog.numLegs);

#+end_src

** Create a Method on an Object
*** INFO:

Objects can have a special type of property, called a method.

Methods are properties that are functions. This adds different behavior to an object. Here is the duck example with a method:

#+begin_src javascript

let duck = {
  name: "Aflac",
  numLegs: 2,
  sayName: function() {return "The name of this duck is " + duck.name + ".";}
};
duck.sayName();

#+end_src

The example adds the sayName method, which is a function that returns a sentence giving the name of the duck. Notice that the method accessed the name property in the return statement using duck.name. The next challenge will cover another way to do this.

*** CODE:

Using the dog object, give it a method called sayLegs. The method should return the sentence This dog has 4 legs.

#+begin_src javascript

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function () { return `This dog has ${dog.numLegs} legs.` }

};

dog.sayLegs();

#+end_src

** Make Code More Reusable with the this Keyword
*** INFO:

The last challenge introduced a method to the duck object. It used duck.name dot notation to access the value for the name property within the return statement:

#+begin_src javascript

sayName: function() {return "The name of this duck is " + duck.name + ".";}

#+end_src

While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.

A way to avoid these issues is with the this keyword:

#+begin_src javascript

let duck = {
  name: "Aflac",
  numLegs: 2,
  sayName: function() {return "The name of this duck is " + this.name + ".";}
};

#+end_src

this is a deep topic, and the above example is only one way to use it. In the current context, this refers to the object that the method is associated with: duck. If the object's name is changed to mallard, it is not necessary to find all the references to duck in the code. It makes the code reusable and easier to read.

*** CODE:

Modify the dog.sayLegs method to remove any references to dog. Use the duck example for guidance.

#+begin_src javascript

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function () { return `This dog has ${this.numLegs} legs.`; }
};

dog.sayLegs();

#+end_src

** Define a Constructor Function
*** INFO:

Constructors are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.

Here is an example of a constructor:

#+begin_src javascript

function Bird() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
}

#+end_src

This constructor defines a Bird object with properties name, color, and numLegs set to Albert, blue, and 2, respectively. Constructors follow a few conventions:

- Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.
- Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.
- Constructors define properties and behaviors instead of returning a value as other functions might.

*** CODE:

Create a constructor, Dog, with properties name, color, and numLegs that are set to a string, a string, and a number, respectively.


#+begin_src javascript

function Dog() {
  this.name = "Spot";
  this.color = "black";
  this.numLegs = 4
}

#+end_src

** Use a Constructor to Create Objects
*** INFO

Here's the Bird constructor from the previous challenge:

#+begin_SRC javascript options

function Bird() {
  this.name = "Albert";
  this.color  = "blue";
  this.numLegs = 2;
}

let blueBird = new Bird();

#+end_SRC


NOTE: this inside the constructor always refers to the object being created.

Notice that the new operator is being used when calling a constructor. This tells JavaScript to create a new instance of Bird called blueBird. Without the new operator, this inside the constructor would not point to the newly created object, giving unexpected results. Now blueBird has all the properties defined inside the Bird constructor:


#+begin_SRC javascript

blueBird.name;
blueBird.color;
blueBird.numLegs;

#+end_SRC

Just like any other object, its properties can be accessed and modified:

#+begin_SRC javascript

blueBird.name = 'Elvira';
blueBird.name;

#+end_SRC

*** CODE:

Use the Dog constructor from the last lesson to create a new instance of Dog, assigning it to a variable hound.

#+begin_src javascript

function Dog() {
  this.name = "Rupert";
  this.color = "brown";
  this.numLegs = 4;
}
// Only change code below this line

let hound = new Dog();

#+end_src

** Extend Constructors to Receive Arguments
*** INFO:

The Bird and Dog constructors from the last challenge worked well. However, notice that all Birds that are created with the Bird constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:

#+begin_src javascript

let swan = new Bird();
swan.name = "Carlos";
swan.color = "white";

#+end_src

Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one. To more easily create different Bird objects, you can design your Bird constructor to accept parameters:

#+begin_src javascript

function Bird(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

#+end_src

Then pass in the values as arguments to define each unique bird into the Bird constructor: let cardinal = new Bird("Bruce", "red"); This gives a new instance of Bird with name and color properties set to Bruce and red, respectively. The numLegs property is still set to 2. The cardinal has these properties:

#+begin_src javascript

cardinal.name
cardinal.color
cardinal.numLegs

#+end_src

The constructor is more flexible. It's now possible to define the properties for each Bird at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.

*** CODE:

Create another Dog constructor. This time, set it up to take the parameters name and color, and have the property numLegs fixed at 4. Then create a new Dog saved in a variable terrier. Pass it two strings as arguments for the name and color properties.

#+begin_src javascript

function Dog(name, color) {
    this.name = name;
    this.color = color;
    this.numLegs = 4;
}

let terrier = new Dog("Max", "grey");

#+end_src

** Verify an Object's Constructor with instanceof
*** INFO:

Anytime a constructor function creates a new object, that object is said to be an instance of its constructor. JavaScript gives a convenient way to verify this with the ~instanceof~ operator. ~instanceof~ allows you to compare an object to a constructor, returning ~true~ or ~false~ based on whether or not that object was created with the constructor. Here's an example:

 #+begin_src javascript

let Bird = function(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

let crow = new Bird("Alexis", "black");

crow instanceof Bird;

#+end_src


This ~instanceof~ method would return true.

If an object is created without using a constructor, ~instanceof~ will verify that it is not an instance of that constructor:

#+begin_src javascript

let canary = {
  name: "Mildred",
  color: "Yellow",
  numLegs: 2
};

canary instanceof Bird;

#+end_src

This ~instanceof~ method would return false.

*** CODE:

Create a new instance of the House constructor, calling it ~myHouse~ and passing a number of bedrooms. Then, use ~instanceof~ to verify that it is an instance of House.

#+begin_src javascript

function House(numBedrooms) {
  this.numBedrooms = numBedrooms;
}

// Only change code below this line

let myHouse = new House(3);

myHouse instanceof House;

#+end_src

** Understand Own Properties
*** INFO:

In the following example, the ~Bird~ constructor defines two properties: ~name~ and ~numLegs~:

#+begin_src javascript

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let duck = new Bird("Donald");
let canary = new Bird("Tweety");

#+end_src

~name~ and ~numLegs~ are called own properties, because they are defined directly on the instance object. That means that ~duck~ and ~canary~ each has its own separate copy of these properties. In fact every instance of ~Bird~ will have its own copy of these properties. The following code adds all of the own properties of ~duck~ to the array ~ownProps~:

#+begin_src javascript

let ownProps = [;

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

console.log(ownProps);

#+end_src

The console would display the value ~["name", "numLegs"~.

*** CODE:

Add the own properties of canary to the array ownProps.

#+begin_src javascript

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let canary = new Bird("Tweety");
let ownProps = [;
// Only change code below this line

for (let property in canary) {
  if(canary.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

#+end_src

** Use Prototype Properties to Reduce Duplicate Code
*** INFO:

Since numLegs will probably have the same value for all instances of Bird, you essentially have a duplicated variable numLegs inside each Bird instance.

This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.

A better way is to use the prototype of Bird. Properties in the prototype are shared among ALL instances of Bird. Here's how to add numLegs to the Bird prototype:

#+begin_src javascript

Bird.prototype.numLegs = 2;

#+end_src

Now all instances of Bird have the numLegs property.

#+begin_src javascript

console.log(duck.numLegs);
console.log(canary.numLegs);

#+end_src

Since all instances automatically have the properties on the prototype, think of a prototype as a "recipe" for creating objects. Note that the prototype for duck and canary is part of the Bird constructor as Bird.prototype. Nearly every object in JavaScript has a prototype property which is part of the constructor function that created it.

*** CODE:

Add a numLegs property to the prototype of Dog

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

// Only change code above this line
let beagle = new Dog("Snoopy");

#+end_src

** Iterate Over All Properties
*** INFO:

You have now seen two kinds of properties: <dfn>own properties</dfn> and ~prototype~ properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the ~prototype~.

#+begin_src javascript

function Bird(name) {
  this.name = name;  //own property
}

Bird.prototype.numLegs = 2; // prototype property

let duck = new Bird("Donald");

#+end_src

Here is how you add ~duck~'s own properties to the array ~ownProps~ and ~prototype~ properties to the array ~prototypeProps~:

#+begin_src javascript

let ownProps = [;
let prototypeProps = [;

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  } else {
    prototypeProps.push(property);
  }
}

console.log(ownProps);
console.log(prototypeProps);

#+end_src

~console.log(ownProps)~ would display ~["name"~ in the console, and ~console.log(prototypeProps)~ would display ~["numLegs"~.

*** CODE:

Add all of the own properties of ~beagle~ to the array ~ownProps~. Add all of the ~prototype~ properties of ~Dog~ to the array ~prototypeProps~.

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

let beagle = new Dog("Snoopy");

let ownProps = [;
let prototypeProps = [;

// Only change code below this line

for (let property in beagle) {
  if(beagle.hasOwnProperty(property)) {
    ownProps.push(property);
  } else {
    prototypeProps.push(property);
  }
}

#+end_src

** Understand the Constructor Property
*** INFO:

There is a special ~constructor~ property located on the object instances ~duck~ and ~beagle~ that were created in the previous challenges:

#+begin_src

let duck = new Bird();
let beagle = new Dog();

console.log(duck.constructor === Bird);
console.log(beagle.constructor === Dog);

#+end_src

Both of these ~console.log~ calls would display ~true~ in the console.

Note that the ~constructor~ property is a reference to the constructor function that created the instance. The advantage of the ~constructor~ property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:

#+begin_src

function joinBirdFraternity(candidate) {
  if (candidate.constructor === Bird) {
    return true;
  } else {
    return false;
  }
}

#+end_src

**Note:** Since the ~constructor~ property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the ~instanceof~ method to check the type of an object.

*** CODE:

Write a ~joinDogFraternity~ function that takes a ~candidate~ parameter and, using the ~constructor~ property, return ~true~ if the candidate is a ~Dog~, otherwise return ~false~.

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

// Only change code below this line
function joinDogFraternity(candidate) {
    if (candidate.constructor === Dog){
    return true;
    } else {
    return false;
    }
}

#+end_src

** Change the Prototype to a New Object
*** INFO:

Up until now you have been adding properties to the ~prototype~ individually:

#+begin_src javascript
Bird.prototype.numLegs = 2;
#+end_src

This becomes tedious after more than a few properties.

#+begin_src javascript
Bird.prototype.eat = function() {
  console.log("nom nom nom");
}

Bird.prototype.describe = function() {
  console.log("My name is " + this.name);
}
#+end_src

A more efficient way is to set the ~prototype~ to a new object that already contains the properties. This way, the properties are added all at once:

#+begin_src javascript
Bird.prototype = {
  numLegs: 2,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};
#+end_src

*** CODE:

Add the property ~numLegs~ and the two methods ~eat()~ and ~describe()~ to the ~prototype~ of ~Dog~ by setting the ~prototype~ to a new object.

#+begin_src javascript
function Dog(name) {
  this.name = name;
}

Dog.prototype = {
  // Only change code below this line
    numLegs: 4,
    eat: function() {
        console.log("eat shit, taste likes real food");
    },
    describe: function () {
        console.log("My name is " + this.name);
    }
};
#+end_src

** Remember to Set the Constructor Property when Changing the Prototype
*** INFO:
There is one crucial side effect of manually setting the prototype to a new object. It erases the ~constructor~ property! This property can be used to check which constructor function created the instance, but since the property has been overwritten, it now gives false results:

#+begin_src javascript
duck.constructor === Bird;
duck.constructor === Object;
duck instanceof Bird;
#+end_src

In order, these expressions would evaluate to ~false~, ~true~, and ~true~.

To fix this, whenever a prototype is manually set to a new object, remember to define the ~constructor~ property:

#+begin_src javascript
Bird.prototype = {
  constructor: Bird,
  numLegs: 2,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};
#+end_src

*** CODE:

Define the ~constructor~ property on the ~Dog~ ~prototype~.

#+begin_src javascript
function Dog(name) {
  this.name = name;
}
// Only change code below this line
Dog.prototype = {
 constructor: Dog,
  numLegs: 4,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};
#+end_src

** Understand Where an Object’s Prototype Comes From
*** INFO:

Just like people inherit genes from their parents, an object inherits its ~prototype~ directly from the constructor function that created it. For example, here the ~Bird~ constructor creates the ~duck~ object:

#+begin_src javascript
function Bird(name) {
  this.name = name;
}

let duck = new Bird("Donald");
#+end_src

~duck~ inherits its ~prototype~ from the ~Bird~ constructor function. You can show this relationship with the ~isPrototypeOf~ method:

#+begin_src javascript
Bird.prototype.isPrototypeOf(duck);
#+end_src

This would return ~true~.

*** CODE:
Use ~isPrototypeOf~ to check the ~prototype~ of ~beagle~.

#+begin_src javascript

function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

// Only change code below this line

Dog.prototype.isPrototypeOf(beagle)
#+end_src

** Understand the Prototype Chain
*** INFO:
All objects in JavaScript (with a few exceptions) have a ~prototype~. Also, an object’s ~prototype~ itself is an object.

#+begin_src javascript
function Bird(name) {
  this.name = name;
}

typeof Bird.prototype;
#+end_src

Because a ~prototype~ is an object, a ~prototype~ can have its own ~prototype~! In this case, the ~prototype~ of ~Bird.prototype~ is ~Object.prototype~:

#+begin_src
Object.prototype.isPrototypeOf(Bird.prototype);
#+end_src

How is this useful? You may recall the ~hasOwnProperty~ method from a previous challenge:

#+begin_src javascript
let duck = new Bird("Donald");
duck.hasOwnProperty("name");
#+end_src

The ~hasOwnProperty~ method is defined in ~Object.prototype~, which can be accessed by ~Bird.prototype~, which can then be accessed by ~duck~. This is an example of the ~prototype~ chain. In this ~prototype~ chain, ~Bird~ is the ~supertype~ for ~duck~, while ~duck~ is the ~subtype~. ~Object~ is a ~supertype~ for both ~Bird~ and ~duck~. ~Object~ is a ~supertype~ for all objects in JavaScript. Therefore, any object can use the ~hasOwnProperty~ method.

*** CODE:

Modify the code to show the correct prototype chain.
#+begin_src javascript
function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

Dog.prototype.isPrototypeOf(beagle);  // yields true

// Fix the code below so that it evaluates to true
Object.prototype.isPrototypeOf(Dog.prototype);
#+end_src

** Use Inheritance So You Don't Repeat Yourself
*** INFO:

There's a principle in programming called /Don't Repeat Yourself (DRY)/. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.

Notice in the example below that the ~describe~ method is shared by ~Bird~ and ~Dog~:

#+begin_src javascript
Bird.prototype = {
  constructor: Bird,
  describe: function() {
    console.log("My name is " + this.name);
  }
};

Dog.prototype = {
  constructor: Dog,
  describe: function() {
    console.log("My name is " + this.name);
  }
};
#+end_src

The ~describe~ method is repeated in two places. The code can be edited to follow the DRY principle by creating a ~supertype~ (or parent) called ~Animal~:

#+begin_src javascript
function Animal() { };

Animal.prototype = {
  constructor: Animal,
  describe: function() {
    console.log("My name is " + this.name);
  }
};
#+end_src

Since ~Animal~ includes the ~describe~ method, you can remove it from ~Bird~ and ~Dog~:

#+begin_src javascript
Bird.prototype = {
  constructor: Bird
};

Dog.prototype = {
  constructor: Dog
};
#+end_src

*** CODE:

The ~eat~ method is repeated in both ~Cat~ and ~Bear~. Edit the code in the spirit of DRY by moving the ~eat~ method to the ~Animal~ ~supertype~.

#+begin_src javascript
function Cat(name) {
  this.name = name;
}

Cat.prototype = {
  constructor: Cat,
};

function Bear(name) {
  this.name = name;
}

Bear.prototype = {
  constructor: Bear,
};

function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};
#+end_src

** Inherit Behaviors from a Supertype

*** INFO:

In the previous challenge, you created a ~supertype~ called ~Animal~ that defined behaviors shared by all animals:

#+begin_src javascript
function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
#+end_src

This and the next challenge will cover how to reuse the methods of ~Animal~ inside ~Bird~ and ~Dog~ without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the ~supertype~ (or parent). You already know one way to create an instance of ~Animal~ using the ~new~ operator:

#+begin_src javascript
let animal = new Animal();
#+end_src

There are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:

#+begin_src javascript
let animal = Object.create(Animal.prototype);
#+end_src

~Object.create(obj)~ creates a new object, and sets ~obj~ as the new object's ~prototype~. Recall that the ~prototype~ is like the "recipe" for creating an object. By setting the ~prototype~ of ~animal~ to be the ~prototype~ of ~Animal~, you are effectively giving the ~animal~ instance the same "recipe" as any other instance of ~Animal~.

#+begin_src javascript
animal.eat();
animal instanceof Animal;
#+end_src

The ~instanceof~ method here would return ~true~.

*** CODE:

Use ~Object.create~ to make two instances of ~Animal~ named ~duck~ and ~beagle~.

#+begin_src javascript
function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

// Only change code below this line

let duck = Object.create(Animal.prototype)// Change this line
let beagle = Object.create(Animal.prototype) // Change this line
#+end_src

** Set the Child's Prototype to an Instance of the Parent

*** INFO:

In the previous challenge you saw the first step for inheriting behavior from the supertype (or parent) ~Animal~: making a new instance of ~Animal~.

This challenge covers the next step: set the ~prototype~ of the subtype (or child) —in this case, ~Bird~ — to be an instance of ~Animal~.

#+begin_src javascript
Bird.prototype = Object.create(Animal.prototype);
#+end_src

Remember that the ~prototype~ is like the "recipe" for creating an object. In a way, the recipe for ~Bird~ now includes all the key "ingredients" from ~Animal~.

#+begin_src javascript
let duck = new Bird("Donald");
duck.eat();
#+end_src

~duck~ inherits all of ~Animal~'s properties, including the ~eat~ method.

*** CODE:

Modify the code so that instances of ~Dog~ inherit from ~Animal~.

#+begin_src javascript
function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

function Dog() { }

// Only change code below this line

Dog.prototype = Object.create(Animal.prototype) ;
let beagle = new Dog();

#+end_src

** Reset an Inherited Constructor Property

*** INFO:

When an object inherits its ~prototype~ from another object, it also inherits the supertype's constructor property.

Here's an example:

#+begin_src javascript
function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
let duck = new Bird();
duck.constructor
#+end_src

But ~duck~ and all instances of ~Bird~ should show that they were constructed by ~Bird~ and not ~Animal~. To do so, you can manually set the constructor property of ~Bird~ to the ~Bird~ object:

#+begin_src javascript
Bird.prototype.constructor = Bird;
duck.constructor
#+end_src

*** CODE:

Fix the code so ~duck.constructor~ and ~beagle.constructor~ return their respective constructors.

#+begin_src javascript
function Animal() { }
function Bird() { }
function Dog() { }

Bird.prototype = Object.create(Animal.prototype);
Dog.prototype = Object.create(Animal.prototype);

// Only change code below this line

Bird.prototype.constructor = Bird;
Dog.prototype.constructor = Dog;

let duck = new Bird();
let beagle = new Dog();
#+end_src

** Add Methods After Inheritance

*** INFO:

A constructor function that inherits its ~prototype~ object from a supertype constructor function can still have its own methods in addition to inherited methods.

For example, ~Bird~ is a constructor that inherits its ~prototype~ from ~Animal~:

#+begin_src javascript
function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
Bird.prototype.constructor = Bird;
#+end_src

In addition to what is inherited from ~Animal~, you want to add behavior that is unique to ~Bird~ objects. Here, ~Bird~ will get a ~fly()~ function. Functions are added to ~Bird's~ ~prototype~ the same way as any constructor function:

#+begin_src javascript
Bird.prototype.fly = function() {
  console.log("I'm flying!");
};
#+end_src

Now instances of ~Bird~ will have both ~eat()~ and ~fly()~ methods:

#+begin_src javascript
let duck = new Bird();
duck.eat();
duck.fly();
#+end_src

~duck.eat()~ would display the string ~nom nom nom~ in the console, and ~duck.fly()~ would display the string ~I'm flying!~.

*** CODE:

Add all necessary code so the ~Dog~ object inherits from ~Animal~ and the ~Dog~'s ~prototype~ constructor is set to ~Dog~. Then add a ~bark()~ method to the ~Dog~ object so that ~beagle~ can both ~eat()~ and ~bark()~. The ~bark()~ method should print ~Woof!~ to the console.

#+begin_src javascript
function Animal() { }
Animal.prototype.eat = function() { console.log("nom nom nom"); };

function Dog() { }

// Only change code below this line

Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;

Dog.prototype.bark = function() {
console.log("Woof!")
};

// Only change code above this line

let beagle = new Dog();
#+end_src

** Override Inherited Meth

*** INFO:

In previous lessons, you learned that an object can inherit its behavior (methods) from another object by referencing its ~prototype~ object:

#+begin_src javascript
ChildObject.prototype = Object.create(ParentObject.prototype);
#+end_src

Then the ~ChildObject~ received its own methods by chaining them onto its ~prototype~:

#+begin_src javascript
ChildObject.prototype.methodName = function() {...};
#+end_src

It's possible to override an inherited method. It's done the same way - by adding a method to ~ChildObject.prototype~ using the same method name as the one to override. Here's an example of ~Bird~ overriding the ~eat()~ method inherited from ~Animal~:

#+begin_src javascript
function Animal() { }
Animal.prototype.eat = function() {
  return "nom nom nom";
};
function Bird() { }

Bird.prototype = Object.create(Animal.prototype);

Bird.prototype.eat = function() {
  return "peck peck peck";
};
#+end_src

If you have an instance ~let duck = new Bird();~ and you call ~duck.eat()~, this is how JavaScript looks for the method on the ~prototype~ chain of ~duck~:

1.  ~duck~ => Is ~eat()~ defined here? No.
2.  ~Bird~ => Is ~eat()~ defined here? => Yes. Execute it and stop searching.
3.  ~Animal~ => ~eat()~ is also defined, but JavaScript stopped searching before reaching this level.
4.  Object => JavaScript stopped searching before reaching this level.

*** CODE:
Override the ~fly()~ method for ~Penguin~ so that it returns the string ~Alas, this is a flightless bird.~

#+begin_src javascript
function Bird() { }

Bird.prototype.fly = function() { return "I am flying!"; };

function Penguin() { }
Penguin.prototype = Object.create(Bird.prototype);
Penguin.prototype.constructor = Penguin;

// Only change code below this line
Penguin.prototype.fly = function() {
    return "Alas, this is a flightless bird."
}


// Only change code above this line

let penguin = new Penguin();
console.log(penguin.fly());
#+end_src

** Use a Mixin to Add Common Behavior Between Unrelated Objects

*** INFO:

As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like ~Bird~ and ~Airplane~. They can both fly, but a ~Bird~ is not a type of ~Airplane~ and vice versa.

For unrelated objects, it's better to use /mixins/. A mixin allows other objects to use a collection of functions.

#+begin_src javascript
let flyMixin = function(obj) {
  obj.fly = function() {
    console.log("Flying, wooosh!");
  }
};
#+end_src

The ~flyMixin~ takes any object and gives it the ~fly~ method.

#+begin_src javascript
let bird = {
  name: "Donald",
  numLegs: 2
};

let plane = {
  model: "777",
  numPassengers: 524
};

flyMixin(bird);
flyMixin(plane);
#+end_src

Here ~bird~ and ~plane~ are passed into ~flyMixin~, which then assigns the ~fly~ function to each object. Now ~bird~ and ~plane~ can both fly:

#+begin_src javascript
bird.fly();
plane.fly();
#+end_src

The console would display the string ~Flying, wooosh!~ twice, once for each ~.fly()~ call.

Note how the mixin allows for the same ~fly~ method to be reused by unrelated objects ~bird~ and ~plane~.

*** CODE:

Create a mixin named ~glideMixin~ that defines a method named ~glide~. Then use the ~glideMixin~ to give both ~bird~ and ~boat~ the ability to glide.

#+begin_src javascript
let bird = {
  name: "Donald",
  numLegs: 2
};

let boat = {
  name: "Warrior",
  type: "race-boat"
};

// Only change code below this line

let glideMixin = function(obj){
    obj.glide = function() {
    console.log("Gliding, swaaash!");
    }
};

glideMixin(bird);
glideMixin(boat);

#+end_src

** Use Closure to Protect Properties Within an Object from Being Modified Externally

*** INFO:

In the previous challenge, ~bird~ had a public property ~name~. It is considered public because it can be accessed and changed outside of ~bird~'s definition.

#+begin_src javascript
bird.name = "Duffy";
#+end_src

Therefore, any part of your code can easily change the name of ~bird~ to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.

The simplest way to make this public property private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the variable can only be accessed and changed by methods also within the constructor function.

#+begin_src javascript
function Bird() {
  let hatchedEgg = 10;

  this.getHatchedEggCount = function() {
    return hatchedEgg;
  };
}
let ducky = new Bird();
ducky.getHatchedEggCount();
#+end_src

Here ~getHatchedEggCount~ is a privileged method, because it has access to the private variable ~hatchedEgg~. This is possible because ~hatchedEgg~ is declared in the same context as ~getHatchedEggCount~. In JavaScript, a function always has access to the context in which it was created. This is called ~closure~.

*** CODE:

Change how ~weight~ is declared in the ~Bird~ function so it is a private variable. Then, create a method ~getWeight~ that returns the value of ~weight~ 15.

#+begin_src javascript
function Bird() {
    let weight = 15;

    this.getWeight = function() {
        return weight;
    };
}
#+end_src

** Understand the Immediately Invoked Function Expression (IIFE)
** Use an IIFE to Create a Module

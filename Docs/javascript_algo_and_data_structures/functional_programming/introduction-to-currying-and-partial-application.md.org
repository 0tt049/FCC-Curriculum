* --description--
  :PROPERTIES:
  :CUSTOM_ID: description
  :END:
The arity of a function is the number of arguments it requires. Currying
a function means to convert a function of N arity into N functions of
arity 1.

In other words, it restructures a function so it takes one argument,
then returns another function that takes the next argument, and so on.

Here's an example:

#+begin_src js
function unCurried(x, y) {
  return x + y;
}

function curried(x) {
  return function(y) {
    return x + y;
  }
}

const curried = x => y => x + y

curried(1)(2)
#+end_src

=curried(1)(2)= would return =3=.

This is useful in your program if you can't supply all the arguments to
a function at one time. You can save each function call into a variable,
which will hold the returned function reference that takes the next
argument when it's available. Here's an example using the curried
function in the example above:

#+begin_src js
const funcForY = curried(1);
console.log(funcForY(2)); // 3
#+end_src

Similarly, partial application can be described as applying a few
arguments to a function at a time and returning another function that is
applied to more arguments. Here's an example:

#+begin_src js
function impartial(x, y, z) {
  return x + y + z;
}

const partialFn = impartial.bind(this, 1, 2);
partialFn(10); // 13
#+end_src

* --instructions--
  :PROPERTIES:
  :CUSTOM_ID: instructions
  :END:
Fill in the body of the =add= function so it uses currying to add
parameters =x=, =y=, and =z=.

* --hints--
  :PROPERTIES:
  :CUSTOM_ID: hints
  :END:
=add(10)(20)(30)= should return =60=.

#+begin_src js
assert(add(10)(20)(30) === 60);
#+end_src

=add(1)(2)(3)= should return =6=.

#+begin_src js
assert(add(1)(2)(3) === 6);
#+end_src

=add(11)(22)(33)= should return =66=.

#+begin_src js
assert(add(11)(22)(33) === 66);
#+end_src

Your code should include a final statement that returns =x + y + z=.

#+begin_src js
assert(code.match(/[xyz]\s*?\+\s*?[xyz]\s*?\+\s*?[xyz]/g));
#+end_src

* --seed--
  :PROPERTIES:
  :CUSTOM_ID: seed
  :END:
** --seed-contents--
   :PROPERTIES:
   :CUSTOM_ID: seed-contents
   :END:
#+begin_src js
function add(x) {
  // Only change code below this line


  // Only change code above this line
}

add(10)(20)(30);
#+end_src

* --solutions--
  :PROPERTIES:
  :CUSTOM_ID: solutions
  :END:
#+begin_src js
const add = x => y => z => x + y + z
#+end_src

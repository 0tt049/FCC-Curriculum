* --description--
  :PROPERTIES:
  :CUSTOM_ID: description
  :END:
Concatenation means to join items end to end. JavaScript offers the
=concat= method for both strings and arrays that work in the same way.
For arrays, the method is called on one, then another array is provided
as the argument to =concat=, which is added to the end of the first
array. It returns a new array and does not mutate either of the original
arrays. Here's an example:

#+begin_src js
[1, 2, 3].concat([4, 5, 6]);
#+end_src

The returned array would be =[1, 2, 3, 4, 5, 6]=.

* --instructions--
  :PROPERTIES:
  :CUSTOM_ID: instructions
  :END:
Use the =concat= method in the =nonMutatingConcat= function to
concatenate =attach= to the end of =original=. The function should
return the concatenated array.

* --hints--
  :PROPERTIES:
  :CUSTOM_ID: hints
  :END:
Your code should use the =concat= method.

#+begin_src js
assert(code.match(/\.concat/g));
#+end_src

The =first= array should not change.

#+begin_src js
assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]));
#+end_src

The =second= array should not change.

#+begin_src js
assert(JSON.stringify(second) === JSON.stringify([4, 5]));
#+end_src

=nonMutatingConcat([1, 2, 3], [4, 5])= should return =[1, 2, 3, 4, 5]=.

#+begin_src js
assert(
  JSON.stringify(nonMutatingConcat([1, 2, 3], [4, 5])) ===
    JSON.stringify([1, 2, 3, 4, 5])
);
#+end_src

* --seed--
  :PROPERTIES:
  :CUSTOM_ID: seed
  :END:
** --seed-contents--
   :PROPERTIES:
   :CUSTOM_ID: seed-contents
   :END:
#+begin_src js
function nonMutatingConcat(original, attach) {
  // Only change code below this line


  // Only change code above this line
}

const first = [1, 2, 3];
const second = [4, 5];
nonMutatingConcat(first, second);
#+end_src

* --solutions--
  :PROPERTIES:
  :CUSTOM_ID: solutions
  :END:
#+begin_src js
function nonMutatingConcat(original, attach) {
  return original.concat(attach);
}
const first = [1, 2, 3];
const second = [4, 5];
#+end_src

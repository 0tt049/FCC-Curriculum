* --description--
  :PROPERTIES:
  :CUSTOM_ID: description
  :END:
The =sort= method sorts the elements of an array according to the
callback function.

For example:

#+begin_src js
function ascendingOrder(arr) {
  return arr.sort(function(a, b) {
    return a - b;
  });
}

ascendingOrder([1, 5, 2, 3, 4]);
#+end_src

This would return the value =[1, 2, 3, 4, 5]=.

#+begin_src js
function reverseAlpha(arr) {
  return arr.sort(function(a, b) {
    return a === b ? 0 : a < b ? 1 : -1;
  });
}

reverseAlpha(['l', 'h', 'z', 'b', 's']);
#+end_src

This would return the value =['z', 's', 'l', 'h', 'b']=.

JavaScript's default sorting method is by string Unicode point value,
which may return unexpected results. Therefore, it is encouraged to
provide a callback function to specify how to sort the array items. When
such a callback function, normally called =compareFunction=, is
supplied, the array elements are sorted according to the return value of
the =compareFunction=: If =compareFunction(a,b)= returns a value less
than 0 for two elements =a= and =b=, then =a= will come before =b=. If
=compareFunction(a,b)= returns a value greater than 0 for two elements
=a= and =b=, then =b= will come before =a=. If =compareFunction(a,b)=
returns a value equal to 0 for two elements =a= and =b=, then =a= and
=b= will remain unchanged.

* --instructions--
  :PROPERTIES:
  :CUSTOM_ID: instructions
  :END:
Use the =sort= method in the =alphabeticalOrder= function to sort the
elements of =arr= in alphabetical order. The function should return the
sorted array.

* --hints--
  :PROPERTIES:
  :CUSTOM_ID: hints
  :END:
Your code should use the =sort= method.

#+begin_src js
assert(code.match(/\.sort/g));
#+end_src

=alphabeticalOrder(["a", "d", "c", "a", "z", "g"])= should return
=["a", "a", "c", "d", "g", "z"]=.

#+begin_src js
assert(
  JSON.stringify(alphabeticalOrder(['a', 'd', 'c', 'a', 'z', 'g'])) ===
    JSON.stringify(['a', 'a', 'c', 'd', 'g', 'z'])
);
#+end_src

=alphabeticalOrder(["x", "h", "a", "m", "n", "m"])= should return
=["a", "h", "m", "m", "n", "x"]=.

#+begin_src js
assert(
  JSON.stringify(alphabeticalOrder(['x', 'h', 'a', 'm', 'n', 'm'])) ===
    JSON.stringify(['a', 'h', 'm', 'm', 'n', 'x'])
);
#+end_src

=alphabeticalOrder(["a", "a", "a", "a", "x", "t"])= should return
=["a", "a", "a", "a", "t", "x"]=.

#+begin_src js
assert(
  JSON.stringify(alphabeticalOrder(['a', 'a', 'a', 'a', 'x', 't'])) ===
    JSON.stringify(['a', 'a', 'a', 'a', 't', 'x'])
);
#+end_src

* --seed--
  :PROPERTIES:
  :CUSTOM_ID: seed
  :END:
** --seed-contents--
   :PROPERTIES:
   :CUSTOM_ID: seed-contents
   :END:
#+begin_src js
function alphabeticalOrder(arr) {
  // Only change code below this line

  return arr
  // Only change code above this line
}

alphabeticalOrder(["a", "d", "c", "a", "z", "g"]);
#+end_src

* --solutions--
  :PROPERTIES:
  :CUSTOM_ID: solutions
  :END:
#+begin_src js
function alphabeticalOrder(arr) {
  return arr.sort();
}
#+end_src

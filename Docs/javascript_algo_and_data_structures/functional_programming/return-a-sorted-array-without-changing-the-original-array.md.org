* --description--
  :PROPERTIES:
  :CUSTOM_ID: description
  :END:
A side effect of the =sort= method is that it changes the order of the
elements in the original array. In other words, it mutates the array in
place. One way to avoid this is to first concatenate an empty array to
the one being sorted (remember that =slice= and =concat= return a new
array), then run the =sort= method.

* --instructions--
  :PROPERTIES:
  :CUSTOM_ID: instructions
  :END:
Use the =sort= method in the =nonMutatingSort= function to sort the
elements of an array in ascending order. The function should return a
new array, and not mutate the =globalArray= variable.

* --hints--
  :PROPERTIES:
  :CUSTOM_ID: hints
  :END:
Your code should use the =sort= method.

#+begin_src js
assert(nonMutatingSort.toString().match(/\.sort/g));
#+end_src

The =globalArray= variable should not change.

#+begin_src js
assert(JSON.stringify(globalArray) === JSON.stringify([5, 6, 3, 2, 9]));
#+end_src

=nonMutatingSort(globalArray)= should return =[2, 3, 5, 6, 9]=.

#+begin_src js
assert(
  JSON.stringify(nonMutatingSort(globalArray)) ===
    JSON.stringify([2, 3, 5, 6, 9])
);
#+end_src

=nonMutatingSort(globalArray)= should not be hard coded.

#+begin_src js
assert(!nonMutatingSort.toString().match(/\[.*?[23569].*?\]/gs));
#+end_src

The function should return a new array, not the array passed to it.

#+begin_src js
assert(nonMutatingSort(globalArray) !== globalArray);
#+end_src

=nonMutatingSort([1, 30, 4, 21, 100000])= should return
=[1, 4, 21, 30, 100000]=.

#+begin_src js
assert(JSON.stringify(nonMutatingSort([1, 30, 4, 21, 100000])) ===
    JSON.stringify([1, 4, 21, 30, 100000]))
#+end_src

=nonMutatingSort([140000, 104, 99])= should return =[99, 104, 140000]=.

#+begin_src js
assert(JSON.stringify(nonMutatingSort([140000, 104, 99])) ===
    JSON.stringify([99, 104, 140000]))
#+end_src

* --seed--
  :PROPERTIES:
  :CUSTOM_ID: seed
  :END:
** --seed-contents--
   :PROPERTIES:
   :CUSTOM_ID: seed-contents
   :END:
#+begin_src js
const globalArray = [5, 6, 3, 2, 9];

function nonMutatingSort(arr) {
  // Only change code below this line


  // Only change code above this line
}

nonMutatingSort(globalArray);
#+end_src

* --solutions--
  :PROPERTIES:
  :CUSTOM_ID: solutions
  :END:
#+begin_src js
const globalArray = [5, 6, 3, 2, 9];
function nonMutatingSort(arr) {
  return [].concat(arr).sort((a,b) => a-b);
}
#+end_src

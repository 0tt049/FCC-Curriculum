* --description--
  :PROPERTIES:
  :CUSTOM_ID: description
  :END:
Functional programming is all about creating and using non-mutating
functions.

The last challenge introduced the =concat= method as a way to combine
arrays into a new one without mutating the original arrays. Compare
=concat= to the =push= method. =push= adds an item to the end of the
same array it is called on, which mutates that array. Here's an example:

#+begin_src js
const arr = [1, 2, 3];
arr.push([4, 5, 6]);
#+end_src

=arr= would have a modified value of =[1, 2, 3, [4, 5, 6]]=, which is
not the functional programming way.

=concat= offers a way to add new items to the end of an array without
any mutating side effects.

* --instructions--
  :PROPERTIES:
  :CUSTOM_ID: instructions
  :END:
Change the =nonMutatingPush= function so it uses =concat= to add
=newItem= to the end of =original= instead of =push=. The function
should return an array.

* --hints--
  :PROPERTIES:
  :CUSTOM_ID: hints
  :END:
Your code should use the =concat= method.

#+begin_src js
assert(code.match(/\.concat/g));
#+end_src

Your code should not use the =push= method.

#+begin_src js
assert(!code.match(/\.?[\s\S]*?push/g));
#+end_src

The =first= array should not change.

#+begin_src js
assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]));
#+end_src

The =second= array should not change.

#+begin_src js
assert(JSON.stringify(second) === JSON.stringify([4, 5]));
#+end_src

=nonMutatingPush([1, 2, 3], [4, 5])= should return =[1, 2, 3, 4, 5]=.

#+begin_src js
assert(
  JSON.stringify(nonMutatingPush([1, 2, 3], [4, 5])) ===
    JSON.stringify([1, 2, 3, 4, 5])
);
#+end_src

* --seed--
  :PROPERTIES:
  :CUSTOM_ID: seed
  :END:
** --seed-contents--
   :PROPERTIES:
   :CUSTOM_ID: seed-contents
   :END:
#+begin_src js
function nonMutatingPush(original, newItem) {
  // Only change code below this line
  return original.push(newItem);

  // Only change code above this line
}

const first = [1, 2, 3];
const second = [4, 5];
nonMutatingPush(first, second);
#+end_src

* --solutions--
  :PROPERTIES:
  :CUSTOM_ID: solutions
  :END:
#+begin_src js
function nonMutatingPush(original, newItem) {
  return original.concat(newItem);
}
const first = [1, 2, 3];
const second = [4, 5];
#+end_src

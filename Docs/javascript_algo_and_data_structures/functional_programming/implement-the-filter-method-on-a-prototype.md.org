* --description--
  :PROPERTIES:
  :CUSTOM_ID: description
  :END:
You might learn a lot about the =filter= method if you implement your
own version of it. It is recommended you use a =for= loop or
=Array.prototype.forEach()=.

* --instructions--
  :PROPERTIES:
  :CUSTOM_ID: instructions
  :END:
Write your own =Array.prototype.myFilter()=, which should behave exactly
like =Array.prototype.filter()=. You should not use the built-in
=filter= method. The =Array= instance can be accessed in the =myFilter=
method using =this=.

* --hints--
  :PROPERTIES:
  :CUSTOM_ID: hints
  :END:
=new_s= should equal =[23, 65, 5]=.

#+begin_src js
assert(JSON.stringify(new_s) === JSON.stringify([23, 65, 5]));
#+end_src

Your code should not use the =filter= method.

#+begin_src js
assert(!code.match(/\.?[\s\S]*?filter/g));
#+end_src

* --seed--
  :PROPERTIES:
  :CUSTOM_ID: seed
  :END:
** --seed-contents--
   :PROPERTIES:
   :CUSTOM_ID: seed-contents
   :END:
#+begin_src js
// The global variable
const s = [23, 65, 98, 5];

Array.prototype.myFilter = function(callback) {
  // Only change code below this line
  const newArray = [];
  // Only change code above this line
  return newArray;
};

const new_s = s.myFilter(function(item) {
  return item % 2 === 1;
});
#+end_src

* --solutions--
  :PROPERTIES:
  :CUSTOM_ID: solutions
  :END:
#+begin_src js
const s = [23, 65, 98, 5];

Array.prototype.myFilter = function(callback) {
  const newArray = [];
  for (let i = 0; i < this.length; i++) {
    if (callback(this[i])) newArray.push(this[i]);
  }
  return newArray;
};

const new_s = s.myFilter(function(item) {
  return item % 2 === 1;
});
#+end_src
